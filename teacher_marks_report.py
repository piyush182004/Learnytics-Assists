import fitz
import ollama
import wandb
from fpdf import FPDF
import time

wandb.login(key="e4c42d08e0619b99531d9876746df3d9ce5026b4")

def extract_text_from_files(filepaths):
    extracted_text = []
    for filepath in filepaths:
        try:
            if filepath.endswith(".pdf"):
                doc = fitz.open(filepath)
                extracted_text.append(" ".join([page.get_text() for page in doc]))
        except Exception as e:
            return f"Error extracting text from {filepath}: {str(e)}"
    return " ".join(extracted_text)

def generate_marks_report(filepaths, age, previous_test_marks, target_marks, additional_notes, learning_style, preferred_subjects, challenges, goals):
    start_time = time.time()  # Start timing
    wandb.init(project="dyslexia-app", name="generate-marks-report", reinit=True)
    
    extracted_text = extract_text_from_files(filepaths) if filepaths else "No files uploaded."

    response = ollama.chat(model='gemma:2b', messages=[
        {"role": "system", "content": "Generate a supportive, encouraging, and detailed improvement report for a dyslexic student. Use clear structure, simple language, and break information into digestible chunks."},
        {"role": "user", "content": f"Create a dyslexia-friendly progress report for a {age}-year-old student. Previous marks: {previous_test_marks}. Target: {target_marks}. Learning style: {learning_style}. Preferred subjects: {preferred_subjects}. Challenges: {challenges}. Goals: {goals}. Additional notes: {additional_notes}. Previous reports data: {extracted_text}"}
    ])
    
    result = response['message']['content']
    execution_time = time.time() - start_time  # Calculate execution time

    # Generate a dyslexia-friendly PDF report
    pdf = create_dyslexic_friendly_pdf(result, f"Progress Report - Age {age}")
    pdf_path = "outputs/marks_report.pdf"
    pdf.output(pdf_path)

    # Create and log the artifact
    artifact = wandb.Artifact("marks_report", type="output")
    artifact.add_file(pdf_path)
    wandb.log_artifact(artifact)

    # Log metadata
    wandb.log({
        "filepaths": filepaths,
        "age": age,
        "previous_test_marks": previous_test_marks,
        "target_marks": target_marks,
        "additional_notes": additional_notes,
        "learning_style": learning_style,
        "preferred_subjects": preferred_subjects,
        "challenges": challenges,
        "goals": goals,
        "execution_time": execution_time,
        "marks_report_content": result
    })
    wandb.finish()
    return result, pdf_path  # Always return both result and pdf_path

def create_dyslexic_friendly_pdf(content, title):
    pdf = FPDF()
    pdf.add_page()
    
    # Set colors for dyslexia-friendly design
    pdf.set_fill_color(255, 252, 231)  # Light yellow background
    pdf.rect(0, 0, 210, 297, 'F')  # Fill page with background color
    
    # Add title
    pdf.set_font("Arial", 'B', 24)
    pdf.set_text_color(106, 17, 203)  # Purple text
    pdf.cell(0, 20, title, 0, 1, 'C')
    pdf.ln(10)
    
    # Add content with dyslexia-friendly formatting
    pdf.set_font("Arial", '', 14)  # Larger font for readability
    pdf.set_text_color(0, 0, 0)  # Black text
    
    # Process content by paragraph
    paragraphs = content.split('\n\n')
    for paragraph in paragraphs:
        if paragraph.strip():
            # Check if this is a heading (starts with # or is in all caps)
            if paragraph.startswith('#') or paragraph.isupper():
                pdf.set_font("Arial", 'B', 16)
                pdf.set_text_color(106, 17, 203)  # Purple for headings
                pdf.multi_cell(0, 10, paragraph.replace('#', '').strip(), 0, 'L')
                pdf.set_font("Arial", '', 14)
                pdf.set_text_color(0, 0, 0)  # Reset to black
            # Check if this is a list item
            elif paragraph.strip().startswith('- ') or paragraph.strip().startswith('* '):
                pdf.set_text_color(0, 102, 204)  # Blue for list items
                pdf.multi_cell(0, 10, paragraph, 0, 'L')
                pdf.set_text_color(0, 0, 0)  # Reset to black
            else:
                pdf.multi_cell(0, 10, paragraph, 0, 'L')
            pdf.ln(5)
    
    # Add footer
    pdf.set_y(270)
    pdf.set_font("Arial", 'I', 10)
    pdf.set_text_color(128, 128, 128)  # Gray
    pdf.cell(0, 10, "Generated by LearnlyticAssist - Dyslexia-Friendly Learning Platform", 0, 0, 'C')
    
    return pdf
